package main

import (
	"encoding/json"
	"html/template"
	"io/ioutil"
	"log"
	"os"
	"strings"
)

var tpl = `// Code generated by network_manager DO NOT EDIT.
package network_manager

{{ range $doc := . }}
// enum {{$doc.Title}} {{$doc.Description}}
{{ range $item := $doc.Items }}
// {{$item.Label}} {{$item.Desc}}
const {{$item.Label}} {{$item.ValueType}} = {{$item.Value}}
{{end}}{{end}}
`

type enumDocItem struct {
	Label     string `json:"label"`
	Value     string `json:"value"`
	ValueType string `json:"valueType"`
	Desc      string `json:"desc"`
}

type enumDoc struct {
	Title       string        `json:"title"`
	Description string        `json:"description"`
	Items       []enumDocItem `json:"items"`
}

func main() {

	raw, err := ioutil.ReadFile("./enum.json")
	if err != nil {
		log.Fatal(err)
	}

	enumDocs := []enumDoc{}

	err = json.Unmarshal(raw, &enumDocs)
	if err != nil {
		log.Fatal(err)
	}

	for d, doc := range enumDocs {
		for i, item := range doc.Items {
			valueType := "uint32"
			if strings.Contains(item.Label, "NM_TERNARY_") {
				valueType = "int8"
			}
			enumDocs[d].Items[i].ValueType = valueType
		}
	}

	tmpl, err := template.New("enum").Parse(tpl)
	if err != nil {
		log.Fatal(err)
	}

	err = tmpl.Execute(os.Stdout, enumDocs)
	if err != nil {
		log.Fatal(err)
	}

}
